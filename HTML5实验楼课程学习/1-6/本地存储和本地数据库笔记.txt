HTML5本地存储和本地数据库笔记：
	为解决客户端浏览器持久化的保存内容，HTML5加入了本地存储和本地数据库。
	本地存储背景：
	1.Cookie的限制：a.大多数浏览器支持最大为4096字节的Cookie
			b.浏览器限制站点在用户计算机上存储的Cookie数量，大多数浏览器每个站点存储20个Cookie，如果过多，则最旧的Cookie便会被丢弃。
			c.有些浏览器会对将接受的来自所有站点的Cookie总数做出绝对限制，通常为300个。
			d.Cookie默认的情况都会随着Http请求发送到后台服务器，但并不是所有请求都需要Cookie,比如js,css,图片等请求。
	为解决这些限制，HTML5通过JS的新API就能直接储存大量数据到客户端浏览器而且支持复杂的本地数据库，让JS更有效。
	HTML5指出两种：a.永久性本地存储（localStorage）,b.会话级别的本地存储（sessionStorage）

	2.localStorage:JS新增API中的localStorage对象，便于用户存储永久存储的Web端数据，不会随着Http请求发送至后台，且基本不用考虑存储数据的大小。
	提供的四种方法：a.setItem(key,value):添加本地存储数据
			b.getItem(key):通过key获取相应的value
			c.removeItem(key):通过key删除本地数据
			d.clear():清空数据
	3.sessionStorage：JS新增对象，通过它可以直接操作存储在浏览器中的会话级别的webStorage。存储在对象中的数据首先是key-value形式的，与浏览器当前会话有关，会话结束后，数据会自动清除。
	提供的四种方法：a.setItem(key,value):添加本地存储数据
			b.getItem(key):通过key获取相应的value
			c.removeItem(key):通过key删除本地数据
			d.clear():清空数据
	以上两种只能提供存储简单数据结构的数据。
	
	本地数据：
	对于复杂的Web应用数据，HTML5提供了浏览器端数据库支持，允许直接通过JS的API在浏览器创建本地数据库，支持标准的SQL的CRUD操作，让离线的Web应用更加方便存储结构化的数据。
	操作本地数据库的基本步骤：
			a.openDataBase（）方法:创建一个访问数据库的对象
			b.利用访问数据库的对象执行transaction方法，通过此方法设置开启事务成功的事件相应方法，在事件响应方法中执行SQL.
			c.通过executeSql方法执行查询。
	1.openDataBase（）方法：  
		var dataBase = openDatabase("student","1.0","学生表"，1024*1024,function())（数据库名称，数据库版本号（一般为1.0，可填可不填），对数据库的描述，设置分配的数据库的大小（单位为kb），回调函数）
	2.db.transaction方法：可设置回调函数，此函数接收一个参数，该参数为我们开启事务的对象，通过它可以执行SQL脚本。
	3.executeSql方法：执行查询。
		ts.executeSql(sqlQuery，[value1,value2..],dataHandler,errorHandle)（需要具体执行的SQL语句，SQL语句中所有使用到的参数的数组，数组中的参数在SQL语句中要用“？”代替，然后依次放入，执行成功时的回调函数，执行失败的回调函数）	
		